#!/usr/bin/env python3
import os
import subprocess
import shutil
import sys
import getpass
import requests
import tarfile
import zipfile
from pathlib import Path
from tempfile import TemporaryDirectory

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
USER = os.getenv('USER')
HOME = Path.home()
TEMP_DIR = TemporaryDirectory()
TEMP_PATH = Path(TEMP_DIR.name)

# –ü—É—Ç–∏
CONFIG_PATHS = {
    'sway_config': HOME / '.config' / 'sway' / 'config',
    'waybar_config': HOME / '.config' / 'waybar' / 'config.jsonc',
    'waybar_style': HOME / '.config' / 'waybar' / 'style.css',
    'waybar_scripts': HOME / '.config' / 'waybar',
    'photo': HOME / 'photo' / '1.jpg',
    'scripts_dir': HOME / 'Scripts',
    'service_file': Path('/etc/systemd/system/filesorter.service'),
    'fonts_dir': HOME / '.local' / 'share' / 'fonts',
    'local_bin': HOME / '.local' / 'bin'
}

# URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)
DOWNLOAD_URLS = {
    'nerd_fonts': "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip",
    'noto_emoji': "https://github.com/googlefonts/noto-emoji/raw/main/fonts/NotoColorEmoji.ttf",
    'sway_config': "https://raw.githubusercontent.com/1q2w3e4rf/config_sway/main/config",
    'waybar_config': "https://raw.githubusercontent.com/1q2w3e4rf/config_sway/main/config.jsonc",
    'waybar_style': "https://raw.githubusercontent.com/1q2w3e4rf/config_sway/main/style.css",
    'sample_photo': "https://github.com/1q2w3e4rf/config_sway/raw/main/1.jpg"
}

# –°–∫—Ä–∏–ø—Ç—ã –¥–ª—è Waybar (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
WAYBAR_SCRIPTS = {
    'language.py': """#!/usr/bin/env python3
import json
import subprocess

def get_lang():
    try:
        output = subprocess.check_output(["swaymsg", "-t", "get_inputs"]).decode()
        data = json.loads(output)
        for device in data:
            if device["type"] == "keyboard":
                lang = device["xkb_active_layout_name"]
                icon = "üá∑üá∫" if "Russian" in lang else "üá∫üá∏" if "English" in lang else "‚å®Ô∏è"
                return {"text": f"{icon} {lang.split()[0]}", "tooltip": f"–Ø–∑—ã–∫: {lang}"}
        return {"text": "‚å®Ô∏è None", "tooltip": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∫—É"}
    except:
        return {"text": "‚å®Ô∏è Error", "tooltip": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∫–∏"}

print(json.dumps(get_lang()))""",
    
    'mediaplayer.py': """#!/usr/bin/env python3
import json
import subprocess

def get_media():
    try:
        status = subprocess.check_output(["playerctl", "status"]).decode().strip()
        if status == "Playing":
            artist = subprocess.check_output(["playerctl", "metadata", "artist"]).decode().strip()
            title = subprocess.check_output(["playerctl", "metadata", "title"]).decode().strip()
            text = f"{artist} - {title}" if artist else title
            return {
                "text": text[:40] + "..." if len(text) > 40 else text,
                "tooltip": f"–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: {text}",
                "class": "playing"
            }
        return {"text": "", "tooltip": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–µ–µ—Ä–∞"}
    except:
        return {"text": "", "tooltip": "–û—à–∏–±–∫–∞ –ø–ª–µ–µ—Ä–∞"}

print(json.dumps(get_media()))""",
    
    'notification.py': """#!/usr/bin/env python3
import json
import subprocess

def get_notifications():
    try:
        count = int(subprocess.check_output(["swaync-client", "-c"]).decode())
        dnd = subprocess.check_output(["swaync-client", "-D"]).decode().strip() == "true"
        icon = "Ôá∑" if dnd else "ÔÉ≥" if count > 0 else "ÔÇ¢"
        return {
            "text": str(count) if count > 0 else "",
            "tooltip": f"{count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π" if count > 0 else "–†–µ–∂–∏–º '–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å'" if dnd else "–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            "class": "dnd" if dnd else "active" if count > 0 else "inactive"
        }
    except:
        return {"text": "ÔÅó", "tooltip": "–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"}

print(json.dumps(get_notifications()))"""
}

class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def run_cmd(cmd, sudo=False, password=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if sudo:
            if not password:
                password = getpass.getpass(f"{Colors.WARNING}–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å sudo: {Colors.ENDC}")
            proc = subprocess.Popen(
                ['sudo', '-S'] + cmd.split(),
                stdin=subprocess.PIPE,
                stderr=subprocess.PIPE,
                universal_newlines=True
            )
            proc.communicate(password + '\n')
            if proc.returncode != 0:
                raise subprocess.CalledProcessError(proc.returncode, cmd)
        else:
            subprocess.run(cmd.split(), check=True)
        return True
    except subprocess.CalledProcessError as e:
        print(f"{Colors.FAIL}–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {cmd}{Colors.ENDC}")
        return False

def download_file(url, dest):
    """–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø–æ URL"""
    print(f"{Colors.OKBLUE}–°–∫–∞—á–∏–≤–∞–Ω–∏–µ {url}...{Colors.ENDC}")
    try:
        response = requests.get(url, stream=True)
        response.raise_for_status()
        with open(dest, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
        return True
    except Exception as e:
        print(f"{Colors.FAIL}–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}{Colors.ENDC}")
        return False

def install_packages():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
    print(f"{Colors.HEADER}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤...{Colors.ENDC}")
    
    packages = [
        'sway', 'waybar', 'alacritty', 'rofi', 'grim', 'slurp',
        'pavucontrol', 'playerctl', 'brightnessctl', 'swaylock',
        'swayidle', 'swaync', 'networkmanager', 'blueman',
        'ttf-jetbrains-mono-nerd', 'noto-fonts-emoji',
        'python-pip', 'python-i3ipc', 'polkit-gnome',
        'meson', 'scdoc', 'wayland-protocols', 'jsoncpp',
        'libmpdclient', 'libnl', 'libpulse', 'libepoxy',
        'gtk-layer-shell', 'wireplumber', 'jq', 'htop',
        'python-requests', 'python-setuptools'
    ]
    
    if not run_cmd(f"pacman -S --needed --noconfirm {' '.join(packages)}", sudo=True):
        print(f"{Colors.WARNING}–ü–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É...{Colors.ENDC}")
        for pkg in packages:
            if not run_cmd(f"pacman -S --needed --noconfirm {pkg}", sudo=True):
                print(f"{Colors.FAIL}–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {pkg}{Colors.ENDC}")

def install_fonts():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤"""
    print(f"{Colors.HEADER}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤...{Colors.ENDC}")
    
    os.makedirs(CONFIG_PATHS['fonts_dir'], exist_ok=True)
    
    # Nerd Fonts
    nerd_zip = TEMP_PATH / "nerd_fonts.zip"
    if download_file(DOWNLOAD_URLS['nerd_fonts'], nerd_zip):
        with zipfile.ZipFile(nerd_zip, 'r') as zip_ref:
            zip_ref.extractall(CONFIG_PATHS['fonts_dir'])
    
    # Noto Emoji
    emoji_font = TEMP_PATH / "NotoColorEmoji.ttf"
    if download_file(DOWNLOAD_URLS['noto_emoji'], emoji_font):
        shutil.copy(emoji_font, CONFIG_PATHS['fonts_dir'])
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —à—Ä–∏—Ñ—Ç–æ–≤
    run_cmd("fc-cache -fv")

def setup_configs():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
    print(f"{Colors.HEADER}–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...{Colors.ENDC}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    os.makedirs(HOME / '.config' / 'sway', exist_ok=True)
    os.makedirs(HOME / '.config' / 'waybar', exist_ok=True)
    os.makedirs(HOME / 'photo', exist_ok=True)
    os.makedirs(HOME / 'Scripts', exist_ok=True)
    os.makedirs(CONFIG_PATHS['local_bin'], exist_ok=True)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤
    print(f"{Colors.OKBLUE}–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...{Colors.ENDC}")
    
    # Sway config
    sway_config_temp = TEMP_PATH / "sway_config"
    if download_file(DOWNLOAD_URLS['sway_config'], sway_config_temp):
        shutil.copy(sway_config_temp, CONFIG_PATHS['sway_config'])
    
    # Waybar config
    waybar_config_temp = TEMP_PATH / "waybar_config"
    if download_file(DOWNLOAD_URLS['waybar_config'], waybar_config_temp):
        shutil.copy(waybar_config_temp, CONFIG_PATHS['waybar_config'])
    
    # Waybar style
    waybar_style_temp = TEMP_PATH / "waybar_style"
    if download_file(DOWNLOAD_URLS['waybar_style'], waybar_style_temp):
        shutil.copy(waybar_style_temp, CONFIG_PATHS['waybar_style'])
    
    # –°–∫—Ä–∏–ø—Ç—ã Waybar
    print(f"{Colors.OKBLUE}–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ Waybar...{Colors.ENDC}")
    for script_name, script_content in WAYBAR_SCRIPTS.items():
        script_path = CONFIG_PATHS['waybar_scripts'] / script_name
        with open(script_path, 'w') as f:
            f.write(script_content)
        os.chmod(script_path, 0o755)
    
    # –§–æ—Ç–æ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π URL)
    photo_temp = TEMP_PATH / "1.jpg"
    if download_file(DOWNLOAD_URLS['sample_photo'], photo_temp):
        shutil.copy(photo_temp, CONFIG_PATHS['photo'])
    else:
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
        print(f"{Colors.WARNING}–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ...{Colors.ENDC}")
        with open(CONFIG_PATHS['photo'], 'wb') as f:
            f.write(b'\x00')

    # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç
    script_path = CONFIG_PATHS['scripts_dir'] / '1.py'
    with open(script_path, 'w') as f:
        f.write("""#!/usr/bin/env python3
print("File sorter service running")""")
    os.chmod(script_path, 0o755)

def create_service():
    """–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞"""
    print(f"{Colors.HEADER}–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞...{Colors.ENDC}")
    
    service_content = f"""[Unit]
Description=File Sorter Service
After=network.target

[Service]
Type=simple
User={USER}
ExecStart=/usr/bin/python3 {CONFIG_PATHS['scripts_dir']}/1.py
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
"""
    
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        try:
            with open(CONFIG_PATHS['service_file'], 'w') as f:
                f.write(service_content)
        except PermissionError:
            print(f"{Colors.WARNING}–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ sudo –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞...{Colors.ENDC}")
            password = getpass.getpass(f"{Colors.WARNING}–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å sudo: {Colors.ENDC}")
            run_cmd(f"echo '{service_content}' | sudo tee {CONFIG_PATHS['service_file']}", sudo=True, password=password)
        
        run_cmd("systemctl daemon-reload", sudo=True)
        run_cmd("systemctl enable filesorter.service", sudo=True)
        run_cmd("systemctl start filesorter.service", sudo=True)
        
        print(f"{Colors.OKGREEN}–°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω{Colors.ENDC}")
    except Exception as e:
        print(f"{Colors.FAIL}–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞: {e}{Colors.ENDC}")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å
        print(f"{Colors.WARNING}–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å...{Colors.ENDC}")
        user_service_dir = HOME / '.config' / 'systemd' / 'user'
        user_service_dir.mkdir(parents=True, exist_ok=True)
        
        user_service_file = user_service_dir / 'filesorter.service'
        with open(user_service_file, 'w') as f:
            f.write(service_content)
        
        run_cmd("systemctl --user daemon-reload")
        run_cmd("systemctl --user enable filesorter.service")
        run_cmd("systemctl --user start filesorter.service")
        
        print(f"{Colors.OKGREEN}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω{Colors.ENDC}")
        print(f"{Colors.BOLD}–î–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:{Colors.ENDC}")
        print("  loginctl enable-linger")

def main():
    print(f"{Colors.HEADER}{Colors.BOLD}–ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã{Colors.ENDC}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ root
    if os.geteuid() == 0:
        print(f"{Colors.FAIL}–û—à–∏–±–∫–∞: –ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç root!{Colors.ENDC}")
        sys.exit(1)
    
    try:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
        install_packages()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤
        install_fonts()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        setup_configs()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        create_service()
        
        print(f"\n{Colors.OKGREEN}{Colors.BOLD}–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!{Colors.ENDC}")
        print(f"\n{Colors.BOLD}–ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ:{Colors.ENDC}")
        print("- –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã")
        print("- –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —à—Ä–∏—Ñ—Ç—ã (Nerd Fonts + Emoji)")
        print("- –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ–Ω—Ñ–∏–≥–∏ Sway –∏ Waybar")
        print("- –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–∫—Ä–∏–ø—Ç—ã Waybar")
        print("- –°–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω systemd —Å–µ—Ä–≤–∏—Å")
        print(f"\n{Colors.BOLD}–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π{Colors.ENDC}")
    
    except KeyboardInterrupt:
        print(f"\n{Colors.FAIL}–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.ENDC}")
        sys.exit(1)
    except Exception as e:
        print(f"\n{Colors.FAIL}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}{Colors.ENDC}")
        sys.exit(1)
    finally:
        TEMP_DIR.cleanup()

if __name__ == "__main__":
    main()
