import os
import shutil
import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

# –ü—É—Ç–∏ (–∑–∞–º–µ–Ω–∏ 'rek' –Ω–∞ —Å–≤–æ—ë –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
DOWNLOADS_PATH = os.path.expanduser("~/Downloads")  # –û—Ç–∫—É–¥–∞ –±–µ—Ä—ë–º —Ñ–∞–π–ª—ã
TARGET_BASE_PATH = "/home/rek"                     # –ö—É–¥–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º (–ø–∞–ø–∫–∏ –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å!)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∏—Ö –ø–∞–ø–∫–∏ (–ø–∞–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ /home/rek/)
CATEGORIES = {
    "Documents": ["Documents", "–î–æ–∫—É–º–µ–Ω—Ç—ã"],
    "Images": ["Pictures", "Images", "–§–æ—Ç–æ"],
    "Music": ["Music", "–ú—É–∑—ã–∫–∞"],
    "Videos": ["Videos", "–í–∏–¥–µ–æ"],
    "Archives": ["Archives", "–ê—Ä—Ö–∏–≤—ã"],
    "Torrents": ["Torrents"],
    "Programs": ["Programs", "–ü—Ä–æ–≥—Ä–∞–º–º—ã"],
    "Books": ["Books", "–ö–Ω–∏–≥–∏"],
    "Scripts": ["Scripts", "–°–∫—Ä–∏–ø—Ç—ã"],
}

# –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
EXTENSIONS = {
    "Documents": [".pdf", ".doc", ".docx", ".txt", ".rtf", ".odt", ".xls", ".xlsx", ".ppt", ".pptx", ".csv"],
    "Images": [".jpg", ".jpeg", ".png", ".gif", ".bmp", ".tiff", ".webp", ".svg", ".heic"],
    "Music": [".mp3", ".flac", ".wav", ".aac", ".ogg", ".m4a", ".wma"],
    "Videos": [".mp4", ".mkv", ".mov", ".avi", ".wmv", ".flv", ".webm", ".m4v", ".3gp"],
    "Archives": [".zip", ".rar", ".7z", ".tar", ".gz", ".bz2", ".xz"],
    "Torrents": [".torrent"],
    "Programs": [".exe", ".msi", ".dmg", ".pkg", ".deb", ".rpm", ".apk"],
    "Books": [".epub", ".mobi", ".fb2", ".djvu"],
    "Scripts": [".py", ".sh", ".bat", ".ps1", ".js", ".php", ".html", ".css"],
}

class DownloadHandler(FileSystemEventHandler):
    def on_created(self, event):
        if not event.is_directory:
            time.sleep(1)  # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            process_file(event.src_path)

def find_target_folder(category):
    """–ò—â–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ /home/rek/"""
    for folder in CATEGORIES.get(category, []):
        full_path = os.path.join(TARGET_BASE_PATH, folder)
        if os.path.exists(full_path):
            return full_path
    return None

def get_file_category(file_extension):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"""
    file_extension = file_extension.lower()
    for category, extensions in EXTENSIONS.items():
        if file_extension in extensions:
            return category
    return "Other"

def process_file(file_path):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª"""
    filename = os.path.basename(file_path)
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
    if filename.startswith('.'):
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    _, extension = os.path.splitext(filename)
    category = get_file_category(extension)
    
    # –ò—â–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É
    target_folder = find_target_folder(category)
    if not target_folder:
        print(f"‚ö† –ü–∞–ø–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {TARGET_BASE_PATH}")
        return
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
    try:
        shutil.move(file_path, target_folder)
        print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â—ë–Ω: {filename} ‚Üí {target_folder}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ {filename}: {e}")

def initial_sort():
    """–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ Downloads"""
    print("üîÑ –ù–∞—á–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ Downloads...")
    for filename in os.listdir(DOWNLOADS_PATH):
        file_path = os.path.join(DOWNLOADS_PATH, filename)
        if os.path.isfile(file_path):
            process_file(file_path)
    print("‚úÖ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def start_monitoring():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–ø–∫–∏ Downloads"""
    event_handler = DownloadHandler()
    observer = Observer()
    observer.schedule(event_handler, DOWNLOADS_PATH, recursive=False)
    observer.start()
    print("üëÄ –ù–∞—á–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–ø–∫–∏ Downloads...")
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

if __name__ == "__main__":
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É Other –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    other_folder = os.path.join(TARGET_BASE_PATH, "Other")
    if not os.path.exists(other_folder):
        os.makedirs(other_folder)
    
    initial_sort()
    start_monitoring()
